type: edu
files:
  - name: test/ChuckNorrisTest.java
    visible: false
    text: |-
      import org.hyperskill.hstest.dynamic.DynamicTest;
      import org.hyperskill.hstest.stage.StageTest;
      import org.hyperskill.hstest.testcase.CheckResult;
      import org.hyperskill.hstest.testing.TestedProgram;
      
      import java.util.ArrayList;
      import java.util.Arrays;
      import java.util.List;
      
      public class ChuckNorrisTest extends StageTest {
        Object[] test_data(){
          String ascii = " !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~";
          List<String> list = new ArrayList<>(Arrays.asList(ascii.split("")));
          list.addAll(Arrays.asList("greetings!",
                  "hello world!",
                  ascii));
          return list.toArray();
        }
      
        @DynamicTest(data = "test_data")
        CheckResult test(String input) {
          TestedProgram pr = new TestedProgram();
          String output = pr.start().strip().toLowerCase();
          List<String> list = new ArrayList<>(Arrays.asList(output.split("\n")));
          list.removeAll(Arrays.asList(""));
      
          if(list.size()!=1 || !list.get(0).contains("input")){
            return CheckResult.wrong("When the program just started, output should contain exactly 1 non-empty line, " +
                    "containing \"input\" substring as it shown in the example, followed by an input");
          }
          output = pr.execute(input);
          list = new ArrayList<>(Arrays.asList(output.split("\n")));
          list.removeAll(Arrays.asList(""));
          if(list.size()!=2){
            return CheckResult.wrong("When the user has entered a string, there should be printed exactly 2 " +
                    "non-empty lines");
          }
          if(!list.get(0).toLowerCase().contains("result")){
            return CheckResult.wrong("When the user has entered a string, the first line of the output " +
                    "should contain \"result\" substring");
          }
      
          //Correct code
          if(!list.get(1).matches("[ 0]*")){
            return CheckResult.wrong("When the user has entered a string, the second line of the output " +
                    "should be a code, that contains only '0' and ' ' characters");
          }
          String code = "";
          String[] chars = list.get(1).strip().split(" ");
          if(chars.length%2!=0){
            return CheckResult.wrong("To produce a series of same value bits, should be used two consecutive blocks, so " +
                    "printed code should contain even amount of blocks");
          }
          String was = chars[0].equals("00") ? "0" : "00";
          for(int i=0;i<chars.length/2;i++){
            if(!chars[i*2].equals("00") && !chars[i*2].equals("0")){
              return CheckResult.wrong("First block in each sequence of same value bits should be either \"00\" or \"0\"");
            }
            if(was.equals(chars[i*2])){
              return CheckResult.wrong("Encoding of a single character sequence should not be separated");
            }
            was = was.equals("00") ? "0" : "00";
            String type = chars[i*2].equals("00")?"0":"1";
            code = code.concat(type.repeat(chars[i*2+1].length()));
          }
          if(code.length()%7!=0){
            return CheckResult.wrong("Summary length of second blocks in each sequence of same value bits should be multiple"+
                    " of 7, as the length of binary code is multiple of 7 (each character should be encoded as 7-bit string)");
          }
          String code_input = "";
          for (int i=0;i<input.length();i++){
            String result = Integer.toBinaryString(input.charAt(i));
            String resultWithPadding = String.format("%7s", result).replaceAll(" ","0");
            code_input = code_input.concat(resultWithPadding);
          }
          if(code_input.replace('0', '2').replace('1', '0').replace('2', '1').equals(code)){
            return CheckResult.wrong("Input string was not encoded correctly, in this case the reason might be that you've " +
                    "encoded '0' sequence with first block \"0\" and '1' sequence with first block \"00\", so the code is " +
                    "\"inverted\"");
          }
          if(!code_input.equals(code)){
            return CheckResult.wrong("Input string was not encoded correctly. Note, that the result should be the whole message" +
                    " converted, and not the concatenation of 7-bit sequences, converted by the principle");
          }
      
          return CheckResult.correct();
        }
      }
    learner_created: false
  - name: src/chucknorris/main/Main.java
    visible: true
    text: |-
      package chucknorris;
      
      import chucknorris.io.input.UserInputManager;
      import chucknorris.io.output.PrintCharacters;
      
      import java.util.Scanner;
      
      public class Main {
          public static void main(String[] args) {
              // Get user input
              System.out.println("Input String");
              String input = UserInputManager.getStringInput();
      
              // Convert user input to array of characters.
              char[] characters = input.toCharArray();
      
              // Print the characters to the console.
              System.out.println("The result");
              PrintCharacters.printCharactersAsBinary(characters);
      
              // Close the scanner.
              UserInputManager.closeScanner();
      
          }
      }
    learner_created: true
  - name: src/chucknorris/io/input/UserInputManager.java
    visible: true
    text: |
      package chucknorris.io.input;
      
      import java.util.Scanner;
      
      public class UserInputManager {
      
          private static final Scanner SCANNER = new Scanner(System.in);
      
          /**
           * Gets the user input as a string.
           *
           * @return The user input as a string.
           */
          public static String getStringInput() {
              return SCANNER.nextLine();
          }
      
          /**
           * Close the scanner.
           */
          public static void closeScanner() {
              SCANNER.close();
          }
      }
    learner_created: true
  - name: src/chucknorris/io/output/PrintCharacters.java
    visible: true
    text: |
      package chucknorris.io.output;
      
      import chucknorris.binary.BinaryConversion;
      
      public class PrintCharacters {
      
          /**
           * Prints characters with a space between.
           *
           * @param characters The characters to be printed.
           */
          public static void printCharacter(char[] characters) {
              for (int i = 0; i < characters.length; i++) {
                  System.out.print(characters[i] + " ");
              }
          }
      
          /**
           * Prints the character and its binary number
           *
           * @param characters The characters to be printed.
           */
          public static void printCharactersAsBinary(char[] characters) {
              for (int i = 0; i < characters.length; i++) {
                  String characterAsBinary = BinaryConversion.convertFromCharacterToBinary(characters[i]);
                  System.out.println(characters[i] + " = " + characterAsBinary);
              }
          }
      }
    learner_created: true
  - name: src/chucknorris/binary/BinaryConversion.java
    visible: true
    text: |
      package chucknorris.binary;
      
      public class BinaryConversion {
      
          /**
           * Converts a character to a binary number, first by getting the ascii value and then
           * converting that using a helper method. The binary number is returned and padded.
           *
           * @param character The character to be converted.
           * @return The binary string.
           */
          public static String convertFromCharacterToBinary(char character) {
              // Convert the character to an ASCII value
              int asciiValue = character;
              String binaryString = convertToBinaryString(asciiValue);
              return padBinaryString(binaryString, 7);
          }
      
          /**
           * Converts the ascii value to a binary string.
           *
           * @param value The ascii value to be converted
           * @return The binary value.
           */
          private static String convertToBinaryString(int value) {
              // StringBuilder for storing the binary string
              StringBuilder binaryString = new StringBuilder();
      
              // Manually convert the ASCII value to a binary string
              int currentValue = value;
              while (currentValue > 0) {
                  if (currentValue % 2 == 0) {
                      binaryString.append('0');
                  } else {
                      binaryString.append('1');
                  }
                  currentValue = currentValue /2;
              }
              // Reverse the binary string since the least significant bit is appended first
              return binaryString.reverse().toString();
          }
      
          /**
           * Pads the start of the binary string with '0's up to the specified length.
           *
           * @param binaryString The binary string to be padded
           * @param length The length of the string after padding
           * @return The padded binary string.
           */
          private static String padBinaryString(String binaryString, int length) {
              StringBuilder paddedBinaryString = new StringBuilder(binaryString);
      
              // Pad the binary string with leading zeros to ensure it is 8 bits long
              while (paddedBinaryString.length() < length) {
                  paddedBinaryString.insert(0, '0');
              }
              return paddedBinaryString.toString();
          }
      
      }
    learner_created: true
  - name: src/chucknorris/binary/ChuckNorrisTechnique.java
    visible: true
    learner_created: true
feedback_link: https://hyperskill.org/learn/step/23026#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Fri, 02 Aug 2024 17:41:06 UTC"
record: 3
